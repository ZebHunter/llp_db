/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: spec.proto */

#ifndef PROTOBUF_C_spec_2eproto__INCLUDED
#define PROTOBUF_C_spec_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _FieldsT FieldsT;
typedef struct _AstNodeT AstNodeT;
typedef struct _Element Element;
typedef struct _PageT PageT;
typedef struct _Response Response;


/* --- enums --- */

typedef enum _NodeTypeT {
  NODE_TYPE_T__SELECT_QUERY_NODE = 0,
  NODE_TYPE_T__INSERT_QUERY_NODE = 1,
  NODE_TYPE_T__UPDATE_QUERY_NODE = 2,
  NODE_TYPE_T__DELETE_QUERY_NODE = 3,
  NODE_TYPE_T__NESTED_QUERY_NODE = 4,
  NODE_TYPE_T__QUERY_SET_NODE = 5,
  NODE_TYPE_T__OBJECT_NODE = 6,
  NODE_TYPE_T__VALUES_NODE = 7,
  NODE_TYPE_T__ELEMENT_SET_NODE = 8,
  NODE_TYPE_T__ELEMENT_NODE = 9,
  NODE_TYPE_T__KEY_NODE = 10,
  NODE_TYPE_T__INT_VAL_NODE = 11,
  NODE_TYPE_T__DOUBLE_VAL_NODE = 12,
  NODE_TYPE_T__BOOL_VAL_NODE = 13,
  NODE_TYPE_T__STR_VAL_NODE = 14,
  NODE_TYPE_T__FILTER_NODE = 15,
  NODE_TYPE_T__OP_EQ_NODE = 16,
  NODE_TYPE_T__OP_NEQ_NODE = 17,
  NODE_TYPE_T__OP_GT_NODE = 18,
  NODE_TYPE_T__OP_GTE_NODE = 19,
  NODE_TYPE_T__OP_LE_NODE = 20,
  NODE_TYPE_T__OP_LEE_NODE = 21,
  NODE_TYPE_T__OP_LIKE_NODE = 22,
  NODE_TYPE_T__OP_AND_NODE = 23,
  NODE_TYPE_T__OP_OR_NODE = 24,
  NODE_TYPE_T__OP_NOT_NODE = 25
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(NODE_TYPE_T)
} NodeTypeT;
typedef enum _ElementType {
  ELEMENT_TYPE__INTEGER = 0,
  ELEMENT_TYPE__FLOAT = 1,
  ELEMENT_TYPE__BOOLEAN = 2,
  ELEMENT_TYPE__STRING = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ELEMENT_TYPE)
} ElementType;

/* --- messages --- */

struct  _FieldsT
{
  ProtobufCMessage base;
  int32_t integervalue;
  double doublevalue;
  protobuf_c_boolean booleanvalue;
  char *stringvalue;
};
#define FIELDS_T__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fields_t__descriptor) \
    , 0, 0, 0, (char *)protobuf_c_empty_string }


struct  _AstNodeT
{
  ProtobufCMessage base;
  AstNodeT *left;
  AstNodeT *right;
  NodeTypeT type;
  FieldsT *field;
};
#define AST_NODE_T__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ast_node_t__descriptor) \
    , NULL, NULL, NODE_TYPE_T__SELECT_QUERY_NODE, NULL }


struct  _Element
{
  ProtobufCMessage base;
  char *name;
  ElementType type;
  FieldsT *field;
  Element *el;
};
#define ELEMENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&element__descriptor) \
    , (char *)protobuf_c_empty_string, ELEMENT_TYPE__INTEGER, NULL, NULL }


struct  _PageT
{
  ProtobufCMessage base;
  int32_t timestamp;
  char *name;
  Element *list;
  PageT *page;
};
#define PAGE_T__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&page_t__descriptor) \
    , 0, (char *)protobuf_c_empty_string, NULL, NULL }


struct  _Response
{
  ProtobufCMessage base;
  char *result;
  PageT *page_list;
};
#define RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&response__descriptor) \
    , (char *)protobuf_c_empty_string, NULL }


/* FieldsT methods */
void   fields_t__init
                     (FieldsT         *message);
size_t fields_t__get_packed_size
                     (const FieldsT   *message);
size_t fields_t__pack
                     (const FieldsT   *message,
                      uint8_t             *out);
size_t fields_t__pack_to_buffer
                     (const FieldsT   *message,
                      ProtobufCBuffer     *buffer);
FieldsT *
       fields_t__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fields_t__free_unpacked
                     (FieldsT *message,
                      ProtobufCAllocator *allocator);
/* AstNodeT methods */
void   ast_node_t__init
                     (AstNodeT         *message);
size_t ast_node_t__get_packed_size
                     (const AstNodeT   *message);
size_t ast_node_t__pack
                     (const AstNodeT   *message,
                      uint8_t             *out);
size_t ast_node_t__pack_to_buffer
                     (const AstNodeT   *message,
                      ProtobufCBuffer     *buffer);
AstNodeT *
       ast_node_t__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ast_node_t__free_unpacked
                     (AstNodeT *message,
                      ProtobufCAllocator *allocator);
/* Element methods */
void   element__init
                     (Element         *message);
size_t element__get_packed_size
                     (const Element   *message);
size_t element__pack
                     (const Element   *message,
                      uint8_t             *out);
size_t element__pack_to_buffer
                     (const Element   *message,
                      ProtobufCBuffer     *buffer);
Element *
       element__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   element__free_unpacked
                     (Element *message,
                      ProtobufCAllocator *allocator);
/* PageT methods */
void   page_t__init
                     (PageT         *message);
size_t page_t__get_packed_size
                     (const PageT   *message);
size_t page_t__pack
                     (const PageT   *message,
                      uint8_t             *out);
size_t page_t__pack_to_buffer
                     (const PageT   *message,
                      ProtobufCBuffer     *buffer);
PageT *
       page_t__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   page_t__free_unpacked
                     (PageT *message,
                      ProtobufCAllocator *allocator);
/* Response methods */
void   response__init
                     (Response         *message);
size_t response__get_packed_size
                     (const Response   *message);
size_t response__pack
                     (const Response   *message,
                      uint8_t             *out);
size_t response__pack_to_buffer
                     (const Response   *message,
                      ProtobufCBuffer     *buffer);
Response *
       response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   response__free_unpacked
                     (Response *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*FieldsT_Closure)
                 (const FieldsT *message,
                  void *closure_data);
typedef void (*AstNodeT_Closure)
                 (const AstNodeT *message,
                  void *closure_data);
typedef void (*Element_Closure)
                 (const Element *message,
                  void *closure_data);
typedef void (*PageT_Closure)
                 (const PageT *message,
                  void *closure_data);
typedef void (*Response_Closure)
                 (const Response *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    node_type_t__descriptor;
extern const ProtobufCEnumDescriptor    element_type__descriptor;
extern const ProtobufCMessageDescriptor fields_t__descriptor;
extern const ProtobufCMessageDescriptor ast_node_t__descriptor;
extern const ProtobufCMessageDescriptor element__descriptor;
extern const ProtobufCMessageDescriptor page_t__descriptor;
extern const ProtobufCMessageDescriptor response__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_spec_2eproto__INCLUDED */
